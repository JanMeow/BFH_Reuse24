        # Search the tile column adjoin the right side of window.
        self.compensatedWindowGeo = []
        self.compensatedWindowGeoNext = []
        self.compensatedDoorGeo = []
        self.compensatedDoorGeoNext = []
        for winb, doorb in zip(windowGeo, doorGeo):
            winVerticesPt = [vertex.Location for vertex in winb.Vertices]
            winVerticesPt = move_largest_x_points(winVerticesPt, basePlane, self.horizontalOverlap/2)
            winVerticesPtforNext = move_largest_x_points(winVerticesPt, basePlane, self.gridDist)
            winVerticesPt.append(winVerticesPt[0])
            winVerticesPtforNext.append(winVerticesPtforNext[0])
            
            self.compensatedWindowGeo.append(rg.Polyline(winVerticesPt))
            self.compensatedWindowGeoNext.append(rg.Polyline(winVerticesPtforNext))

            
            doorVerticesPt = [vertex.Location for vertex in doorb.Vertices]
            doorVerticesPt = move_largest_x_points(doorVerticesPt, basePlane, self.horizontalOverlap/2)
            doorVerticesPtforNext = move_largest_x_points(doorVerticesPt, basePlane, self.gridDist)
            doorVerticesPt.append(doorVerticesPt[0])
            doorVerticesPtforNext.append(doorVerticesPtforNext[0])
            
            self.compensatedDoorGeo.append(rg.Polyline(doorVerticesPt))
            self.compensatedDoorGeoNext.append(rg.Polyline(doorVerticesPtforNext))
            
        # Ci, self.Co = TrimwithRegions(midCurves, self.compensatedWindowGeo, basePlane)

        self.CoIfCut = []
        self.Co = []
        for midCrv in midCurves:
            oneCrvCi, oneCrvCo = TrimwithRegions(midCrv, self.compensatedWindowGeo, basePlane)
            if oneCrvCi != None:
                self.Co.extend(oneCrvCo)
                self.CoIfCut.extend([True, True])
            else:
                self.Co.extend([oneCrvCo])
                self.CoIfCut.extend([False])

        self.originalCo = deepcopy(self.Co)
        self.originalCoGraft = [[c] for c in self.originalCo]

        trimedCo = [] # Store shorten Crv
        ptsAndId = []
        sideId = []
        for crv in self.Co:
            tForTouch = 10
            crv = crv.Trim(rg.CurveEnd.Start, tForTouch)
            crv = crv.Trim(rg.CurveEnd.End, tForTouch)
            trimedCo.append(crv)
        
        for i, (crv, crvIfCut) in enumerate(zip(trimedCo, self.CoIfCut)):
            pts = []
            id = None
            for windowCrv in self.compensatedWindowGeoNext:
                events = rg.Intersect.Intersection.CurveCurve(crv.ToNurbsCurve(), windowCrv.ToNurbsCurve(), 0.1, 0.1)
                if events and not crvIfCut:
                    id = i
                    for j in range(len(events)):
                        pts.append(events[j].PointA)
            
            if id is not None:
                ptsAndId.append((id, pts))
                sideId.append(id)
        

        for (id, TwoPts), windowPlane in zip(ptsAndId, self.finalWindowPlaneList):
            dist = TwoPts[0].DistanceTo(TwoPts[1])
            sideTileNum = math.ceil((dist + self.verticalOverlap)/self.minTileLength)
            downTowardDist = self.minTileLength*sideTileNum/2
            downTowardDirect = - windowPlane.YAxis * downTowardDist
            averPt = (TwoPts[0] + TwoPts[1])/2
            trans = rg.Transform.Translation(downTowardDirect)
            averPt.Transform(trans)
            moveSeries = [rg.Transform.Translation(windowPlane.YAxis*self.minTileLength*i) for i in range(int(sideTileNum+1))]

            ptSeries = []
            for trans in moveSeries:
                pt = copy(averPt)
                pt.Transform(trans)
                ptSeries.append(pt)
            
            splittedCrv = split_curve_by_points(self.Co[id], ptSeries)
            splittedCrv[0] = splittedCrv[0].Extend(rg.CurveEnd.Start, self.verticalOverlap*2, 0)
            splittedCrv[-1] = splittedCrv[-1].Extend(rg.CurveEnd.End, self.verticalOverlap*2, 0)

            self.Co[id] = []
            self.Co[id] = list(splittedCrv)


        extendCo = deepcopy(self.Co)
        for index, crv in enumerate(self.Co):
            if index in sideId:
                continue
            extendCo[index] = extendCo[index].Extend(rg.CurveEnd.Start, self.verticalOverlap, 0)
            extendCo[index] = [extendCo[index].Extend(rg.CurveEnd.End, self.verticalOverlap, 0)]
            # Here self.Co format is changed into nest structure.
  
        extendCoLength = deepcopy(extendCo)
        for gId, group in enumerate(extendCo):
            for cId, crv in enumerate(group):
                extendCoLength[gId][cId] = crv.GetLength()
        
        return (extendCo, extendCoLength)